// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 98sZpX3o3cqNhorsdtcuRP
// Component: qt9Pk6jhrB
import * as React from "react";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_blank_project_mobile_first.module.css"; // plasmic-import: 98sZpX3o3cqNhorsdtcuRP/projectcss
import sty from "./Plasmic_2Register.module.css"; // plasmic-import: qt9Pk6jhrB/css

export const Plasmic_2Register__VariantProps = new Array();

export const Plasmic_2Register__ArgProps = new Array();

function Plasmic_2Register__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"register"}
            data-plasmic-override={overrides.register}
            className={classNames(projectcss.all, sty.register)}
          >
            <div
              data-plasmic-name={"frame1"}
              data-plasmic-override={overrides.frame1}
              className={classNames(projectcss.all, sty.frame1)}
            >
              <div
                data-plasmic-name={"sinscrire"}
                data-plasmic-override={overrides.sinscrire}
                className={classNames(projectcss.all, sty.sinscrire)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__jB6WL
                  )}
                >
                  {"Sâ€™inscrire"}
                </div>
              </div>
            </div>

            <div
              data-plasmic-name={"frame2"}
              data-plasmic-override={overrides.frame2}
              className={classNames(projectcss.all, sty.frame2)}
            >
              <div
                data-plasmic-name={"freePark"}
                data-plasmic-override={overrides.freePark}
                className={classNames(projectcss.all, sty.freePark)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ptbdI
                  )}
                >
                  {"FreePark"}
                </div>
              </div>
            </div>

            <input
              data-plasmic-name={"textInput"}
              data-plasmic-override={overrides.textInput ?? overrides.textbox}
              className={classNames(
                projectcss.all,
                projectcss.input,
                sty.textInput
              )}
              disabled={false}
              placeholder={"Email"}
              size={1}
              type={"text"}
              value={""}
            />

            <input
              data-plasmic-name={"passwordInput"}
              data-plasmic-override={overrides.passwordInput}
              className={classNames(
                projectcss.all,
                projectcss.input,
                sty.passwordInput
              )}
              size={1}
              type={"password"}
              value={"Some password"}
            />

            <a
              data-plasmic-name={"link"}
              data-plasmic-override={overrides.link}
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link
              )}
              href={"/login"}
            >
              <React.Fragment>
                <React.Fragment>{""}</React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ color: "#008B92" }}
                >
                  {"Se connecter"}
                </span>
                <React.Fragment>{""}</React.Fragment>
              </React.Fragment>
            </a>
          </div>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "register",
    "frame1",
    "sinscrire",
    "frame2",
    "freePark",
    "textInput",
    "textbox",
    "passwordInput",
    "link"
  ],

  register: [
    "register",
    "frame1",
    "sinscrire",
    "frame2",
    "freePark",
    "textInput",
    "textbox",
    "passwordInput",
    "link"
  ],

  frame1: ["frame1", "sinscrire"],
  sinscrire: ["sinscrire"],
  frame2: ["frame2", "freePark"],
  freePark: ["freePark"],
  textInput: ["textInput", "textbox"],
  passwordInput: ["passwordInput"],
  link: ["link"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: Plasmic_2Register__ArgProps,
      internalVariantPropNames: Plasmic_2Register__VariantProps
    });

    return Plasmic_2Register__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "Plasmic_2Register";
  } else {
    func.displayName = `Plasmic_2Register.${nodeName}`;
  }
  return func;
}

export const Plasmic_2Register = Object.assign(
  // Top-level Plasmic_2Register renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    register: makeNodeComponent("register"),
    frame1: makeNodeComponent("frame1"),
    sinscrire: makeNodeComponent("sinscrire"),
    frame2: makeNodeComponent("frame2"),
    freePark: makeNodeComponent("freePark"),
    textInput: makeNodeComponent("textInput"),
    passwordInput: makeNodeComponent("passwordInput"),
    link: makeNodeComponent("link"),
    // Metadata about props expected for Plasmic_2Register
    internalVariantProps: Plasmic_2Register__VariantProps,
    internalArgProps: Plasmic_2Register__ArgProps
  }
);

export default Plasmic_2Register;
/* prettier-ignore-end */
